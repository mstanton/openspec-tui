[build-system]
# Architecture Decision Record: Using setuptools for Python packaging
# Rationale: setuptools provides comprehensive packaging features, excellent
# compatibility with modern Python packaging standards, and robust dependency
# management. This choice ensures compatibility with pip, uv, and other package
# managers while providing advanced features like entry points and data files.
requires = ["setuptools>=68.0.0", "wheel>=0.40.0"]
build-backend = "setuptools.build_meta"

[project]
# Project metadata following PEP 621 standards
# Security Classification: PUBLIC - No sensitive information
name = "openspec-tui"
version = "1.0.0"
description = "A beautiful terminal user interface for creating and editing OpenSpec specifications"
readme = "README.md"
license = "MIT"
authors = [
    {name = "OpenSpec TUI Team", email = "support@openspec.dev"}
]
maintainers = [
    {name = "OpenSpec TUI Team", email = "support@openspec.dev"}
]
keywords = [
    "openspec",
    "tui",
    "terminal",
    "textual",
    "specification",
    "ai",
    "development",
    "markdown",
    "editor"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: User Interfaces",
    "Topic :: Text Editors",
    "Topic :: Terminals",
    "Environment :: Console",
    "Framework :: Textual",
]
requires-python = ">=3.8"
dependencies = [
    # Core TUI framework - Security: vetted for production use
    "textual>=0.41.0,<1.0.0",
    # JSON handling for metadata - Security: built-in Python library
    # Note: Using built-in json module, no external dependency needed
    # Path handling - Security: built-in Python library
    # Note: Using pathlib from stdlib, no external dependency needed
    # Date/time handling - Security: built-in Python library
    # Note: Using datetime from stdlib, no external dependency needed
]

# Optional dependencies for enhanced functionality
[project.optional-dependencies]
# Development dependencies for contributors
dev = [
    # Code formatting and style enforcement
    "black>=23.0.0,<24.0.0",
    "isort>=5.12.0,<6.0.0",
    "flake8>=6.0.0,<7.0.0",
    "mypy>=1.5.0,<2.0.0",
    # Testing framework and tools
    "pytest>=7.4.0,<8.0.0",
    "pytest-cov>=4.1.0,<5.0.0",
    "pytest-mock>=3.11.0,<4.0.0",
    # Development tools
    "pre-commit>=3.4.0,<4.0.0",
    "tox>=4.6.0,<5.0.0",
    # Documentation generation
    "sphinx>=7.1.0,<8.0.0",
    "sphinx-rtd-theme>=1.3.0,<2.0.0",
]
# Testing dependencies (subset of dev for CI/CD)
test = [
    "pytest>=7.4.0,<8.0.0",
    "pytest-cov>=4.1.0,<5.0.0",
    "pytest-mock>=3.11.0,<4.0.0",
]
# Documentation dependencies
docs = [
    "sphinx>=7.1.0,<8.0.0",
    "sphinx-rtd-theme>=1.3.0,<2.0.0",
    "myst-parser>=2.0.0,<3.0.0",
]
# Security scanning and vulnerability assessment
security = [
    "bandit>=1.7.5,<2.0.0",
    "safety>=2.3.0,<3.0.0",
    "semgrep>=1.40.0,<2.0.0",
]

# Project URLs for documentation and support
[project.urls]
Homepage = "https://github.com/Fission-AI/openspec-tui"
Documentation = "https://openspec-tui.readthedocs.io/"
Repository = "https://github.com/Fission-AI/openspec-tui.git"
"Bug Tracker" = "https://github.com/Fission-AI/openspec-tui/issues"
Changelog = "https://github.com/Fission-AI/openspec-tui/blob/main/CHANGELOG.md"
Discord = "https://discord.gg/YctCnvvshC"
Twitter = "https://twitter.com/0xTab"

# Console script entry points
# Security: Entry points provide secure command-line interface
# Rationale: Using entry points enables proper installation and execution
# of the TUI application with proper Python path resolution
[project.scripts]
openspec-tui = "openspec_tui:main"
openspec-tui-editor = "openspec_tui:main"

# GUI application entry points (for systems that support it)
[project.gui-scripts]
openspec-tui-gui = "openspec_tui:main"

# OpenSpec plugin entry points for extensibility
[project.entry-points."openspec.plugins"]
tui-editor = "openspec_tui:OpenSpecTUI"

# Package discovery configuration
[tool.setuptools]
# Security: Explicit package discovery prevents accidental inclusion
# of sensitive files or unintended modules
packages = ["openspec_tui"]
include-package-data = true

[tool.setuptools.package-data]
# Include any additional data files needed by the application
"openspec_tui" = ["*.json", "*.md", "*.txt", "*.yaml", "*.yml"]

# Entry point configuration for extensibility
# Note: Entry points are defined in the [project] section above

# Black code formatting configuration
# Security: Consistent formatting reduces security review surface area
# and makes malicious code injection more detectable
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\\.pyi?$'
extend-exclude = '''
/(
  # Directories to exclude from formatting
  \\.eggs
  | \\.git
  | \\.hg
  | \\.mypy_cache
  | \\.tox
  | \\.venv
  | _build
  | buck-out
  | build
  | dist
  | \\.pytest_cache
)/
'''
# Security: Use stable formatting to prevent supply chain attacks
preview = false

# isort import sorting configuration
# Security: Consistent import ordering helps detect unauthorized imports
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
# Security: Sort imports to detect suspicious additions
known_first_party = ["openspec_tui"]
known_third_party = ["textual"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

# MyPy type checking configuration
# Security: Type checking helps prevent type-related vulnerabilities
# and improves code security through static analysis
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
# Security: Show error codes for better debugging
show_error_codes = true
# Security: Enable strict mode for maximum type safety
strict = true

# Pytest testing configuration
# Security: Comprehensive testing helps ensure security requirements are met
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=openspec_tui",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "--tb=short",
    "-v"
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "security: marks tests as security-related",
]
# Security: Filter warnings to focus on important issues
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage configuration for security testing
[tool.coverage.run]
source = ["openspec_tui"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
    "*/\\.venv/*",
    "*/\\.env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Flake8 linting configuration
# Security: Linting helps identify security anti-patterns and code smells
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    ".env",
    "venv",
    "env",
]
# Security: Enable security-focused plugins
select = ["E", "W", "F", "C", "B", "A", "S"]
# Security: Disable specific rules that conflict with Black formatting
ignore = ["E203", "W503"]

# Bandit security linting configuration
# Security: Bandit scans for common security vulnerabilities
[tool.bandit]
exclude_dirs = ["tests", "test_*", "__pycache__"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection for testing
confidence = "medium"
severity = "medium"

# Pre-commit hooks configuration
# Security: Pre-commit hooks enforce security standards before commits
[tool.pre-commit]
repos = [
    {repo = "https://github.com/pre-commit/pre-commit-hooks", rev = "v4.4.0", hooks = [
        {id = "trailing-whitespace", args = ["--markdown-linebreak-ext=md"]},
        {id = "end-of-file-fixer"},
        {id = "check-yaml"},
        {id = "check-added-large-files"},
        {id = "check-merge-conflict"},
        {id = "check-json"},
        {id = "mixed-line-ending"},
        {id = "check-toml"},
    ]},
    {repo = "https://github.com/psf/black", rev = "23.7.0", hooks = [{id = "black", language_version = "python3"}]},
    {repo = "https://github.com/pycqa/isort", rev = "5.12.0", hooks = [{id = "isort"}]},
    {repo = "https://github.com/pycqa/flake8", rev = "6.0.0", hooks = [{id = "flake8"}]},
    {repo = "https://github.com/pre-commit/mirrors-mypy", rev = "v1.5.1", hooks = [{id = "mypy", additional_dependencies = ["types-all"]}]},
    {repo = "https://github.com/PyCQA/bandit", rev = "1.7.5", hooks = [{id = "bandit", args = ["-r", ".", "-f", "json", "-o", "bandit-report.json"]}]}
]

# Tox testing configuration
# Security: Tox ensures consistent testing across Python versions
[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py38, py39, py310, py311, py312, lint, security
isolated_build = True

[testenv]
deps =
    pytest>=7.4.0
    pytest-cov>=4.1.0
    pytest-mock>=3.11.0
commands =
    pytest {posargs:tests} --cov=openspec_tui --cov-report=term-missing

[testenv:lint]
deps =
    black>=23.0.0
    isort>=5.12.0
    flake8>=6.0.0
    mypy>=1.5.0
commands =
    black --check openspec_tui tests
    isort --check-only openspec_tui tests
    flake8 openspec_tui tests
    mypy openspec_tui

[testenv:security]
deps =
    bandit>=1.7.5
    safety>=2.3.0
commands =
    bandit -r openspec_tui
    safety check

[testenv:docs]
deps =
    sphinx>=7.1.0
    sphinx-rtd-theme>=1.3.0
commands =
    sphinx-build -W -b html docs docs/_build/html
"""

# Sphinx documentation configuration
# Security: Documentation helps maintain security awareness
[tool.sphinx]
# Note: Sphinx configuration is typically in docs/conf.py
# This section provides metadata for documentation generation
project = "OpenSpec TUI"
copyright = "2024, OpenSpec TUI Team"
author = "OpenSpec TUI Team"
release = "1.0.0"
version = "1.0"

# Security scanning configuration
[tool.semgrep]
# Security: Semgrep provides advanced security scanning
# Configuration for custom security rules
rules = [
    "p/security-audit",
    "p/owasp-top-ten",
    "p/python",
    "p/bandit",
]

# UV package manager configuration (if using UV)
# Security: UV provides fast, secure dependency resolution
[tool.uv]
dev-dependencies = [
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pre-commit>=3.4.0",
    "tox>=4.6.0",
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
    "semgrep>=1.40.0",
]

# Security: Pin dependency versions for reproducible builds
[tool.uv.sources]
# No custom sources needed for this project

# Ruff configuration (alternative to flake8/black/isort)
# Security: Ruff provides fast linting and formatting
[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "Q",  # flake8-quotes
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["ARG", "S101", "TID"]

[tool.ruff.isort]
known-first-party = ["openspec_tui"]

# Security: Configure ruff to be strict about security issues
[tool.ruff.lint]
# Enable security-focused rules
select = ["S"]  # flake8-bandit security rules
ignore = ["S101"]  # Ignore assert usage in tests

# Pylint configuration (alternative comprehensive linter)
# Security: Pylint provides comprehensive code analysis
[tool.pylint.messages_control]
disable = [
    "C0114", # missing-module-docstring
    "C0116", # missing-function-docstring
    "R0903", # too-few-public-methods
    "R0913", # too-many-arguments
]

[tool.pylint.format]
max-line-length = "88"

[tool.pylint.design]
max-args = 8
max-locals = 20
max-branches = 15
max-statements = 60

# Security: Enable security-related checks
[tool.pylint.security]
enable = true
